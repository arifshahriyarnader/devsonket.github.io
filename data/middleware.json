{
    "id": "middleware",
    "title": "Express JS Middleware",
    "slug": "middleware",
    "descripttion":"Express js in Middleware",
    "colorPref": "#000",
    "contents":[
        {
            "title":"middleware কি এবং এটা কিভাবে কাজ করে",
            "items":[
                {
                    "definition":"মিডলওয়্যার হচ্ছে একটা ফাংশন।"
                },
                {
                    "definition":"মিডলওয়্যার এর ভিতর দুইটা অবজেক্ট থাকবে এবং নেক্সট নামে একটা ফাংশন থাকবে। "
                },
                {
                    "definition":"রিকোয়েস্ট অবজেক্ট(req), রেসপন্স অবজেক্ট(res), next() নেক্সট ফাংশন।"
                },
                {
                    "definition":"নেক্সট() হচ্ছে একটা মিডলওয়্যার এর ফাংশন যা একটা মিডলওয়্যার এর কাজ শেষ হবার পর অন্য একটি মিডলওয়্যার এর কাজ করে।"
                },
                {
                    "definition":"মিডলওয়্যার  বুঝতে গেলে আমাদেরকে রিকোয়েস্ট এবং রেসপন্সটা বুঝতে হবে"
                },
                {
                    "definition":"সবার প্রথমে Http Client একটা রিকুয়েস্ট পাঠাবে Express app এর মধ্যে।"
                },
                {
                    "definition":"তারপর Http রিকুয়েস্ট Express app এ প্রবেশ করার পর Http Client একটা রেসপন্স এর জন্য অপেক্ষা করবে।"
                },
                {
                    "definition":"সেই রেসপন্স দেওয়ার আগে Express app বিভিন্ন ফাংশন এর মধ্যে ঘুরতে পারে।"
                },
                {
                    "definition":"যেমন :-আমরা ধরতে পারি, Express app এর কাছে রিকোয়েস্টটা আসলো তারপর সে একটা রিকোয়েস্ট নিয়ে middleware1() নামে একটা ফাংশন এর কাছে পাঠিয়ে দিলো।"
                },
                {
                    "definition":"তারপর সেই middleware1() বেশ কিছু কাজ করে একটা next() ফাংশন কল করে দিবে।"
                },
                {
                    "definition":"তারপর এই next() ফাংশনটা কল করে দিলে সেটা পরের আরেকটা মিডলওয়্যার  এর কাছে চলে যাবে সেটা হচ্ছে  middleware2()।"
                },
                {
                    "definition":"তারপর আবার middleware2() বেশ কিছু কাজ করে একটা next() ফাংশন কল করে দিবে।"
                },
                {
                    "definition":"তারপর এই next() ফাংশনটা কল করে দিলে সেটা পরের আরেকটা মিডলওয়্যার  এর কাছে চলে যাবে সেটা হচ্ছে middleware3()।"
                },
                {
                    "definition":"তারপর আবার middleware3() বেশ কিছু কাজ করে একটা next() ফাংশন কল করে দিবে।"
                },
                {
                    "definition":"তারপর next() ফাংশন middleware4() এর কাছে পাঠিয়ে দিবে।"
                },
                {
                    "definition":"তারপর পরিশেষে middleware4() Client কে রেসপন্স দিয়ে দিবে।"
                },
                {
                    "definition":"এইভাবে Request-Response Cycle এ মিডলওয়্যার কাজ করে।"
                },
                {
                    "definition":"মিডলওয়্যার এর কোড :-"
                },
                {
                    "code":"const firstMiddleware=(req,res,next) =>{"
                },
                {
                    "code":"console.log('First Middleware');"
                },
                {
                    "code":" next();"
                },
                {
                    "code":"}"
                },
                {
                    "code":"app.use(firstMiddleware);"
                },
                {
                    "definition":"বিভিন্ন ধরনের মিডলওয়্যার  আছে।"
                },
                {
                    "definition":"1.Application-level middleware (এপ্লিকেশন লেভেল মিডলওয়্যার)."
                },
                {
                    "code":"app.use((req, res, next) => {"
                },
                {
                    "code":"console.log('Time:',Date.now())"
                },
                {
                    "code":"next()"
                },
                {
                    "code":"})"
                },
                {
                    "definition":"2.Router-level middleware (রাউটার লেভেল মিডলওয়্যার)."
                },
                {
                    "code":"router.use((req, res, next) => {"
                },
                {
                    "code":"console.log('Time:', Date.now())"
                },
                {
                    "code":"next()"
                },
                {
                    "code":"})"
                },
                {
                    "definition":"3.Error-handling middleware (এরর হ্যান্ডলিং মিডলওয়্যার)."
                },
                {
                    "code":"app.use((err, req, res, next) => {"
                },
                {
                    "code":"console.error(err.stack)"
                },
                {
                    "code":" res.status(500).send('Something broke!')"
                },
                {
                    "code":"})"
                },
                {
                    "definition":"4.Built-in middleware (বিল্ট ইন মিডলওয়্যার)."
                },
                {
                    "definition":"5.Third-party middleware (থার্ড পার্টি  মিডলওয়্যার)."
                },
                {
                    "code":"$ npm install cookie-parser"
                },
                {
                    "code":"const cookieParser = require('cookie-parser')"
                },
                {
                    "definition":"// load the cookie-parsing middleware",
                    "code":"app.use(cookieParser())"
                }
            ]
        }
    ]
}